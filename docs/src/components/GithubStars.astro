---
// docs/src/components/GithubStars.astro
const REPO = "codybrom/blankie";

// Get stars at build time as a fallback
const getStarCount = async () => {
  try {
    const response = await fetch(`https://api.github.com/repos/${REPO}`, {
      headers: {
        Accept: "application/vnd.github.v3+json",
        "User-Agent": "BlankeRESTwebsite",
      },
    });

    if (!response.ok) {
      console.error(`Error fetching star count: ${response.statusText}`);
      return null;
    }

    const data = await response.json();
    return data.stargazers_count;
  } catch (error) {
    console.error("Error fetching GitHub stars:", error);
    return null;
  }
};

// This execution happens at build time in Astro
const initialStars = await getStarCount();
const formattedInitialStars =
  initialStars !== null
    ? new Intl.NumberFormat("en-US").format(initialStars)
    : "â˜…";
---

<a
  href={`https://github.com/${REPO}`}
  target="_blank"
  rel="noopener noreferrer"
  class="inline-flex items-center text-sm group hover:bg-[#30363d] transition-colors duration-200 rounded-md border border-mid-gray w-fit"
  title="Star us on GitHub"
  id="github-stars-link"
>
  <span
    class="inline-flex items-center gap-1.5 px-3 py-1 font-medium bg-card text-light-gray"
  >
    <svg
      viewBox="0 0 16 16"
      width="16"
      height="16"
      class="inline-block fill-current"
      aria-hidden="true"
    >
      <path
        d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Z"
      ></path>
    </svg>
    <span>GitHub Stars</span>
  </span>
  <span
    class="inline-flex items-center px-3 py-1 font-medium bg-card text-light-gray border-l border-mid-gray"
    id="github-stars-count"
  >
    {formattedInitialStars}
  </span>
</a>

<script>
  // Client-side script to update the star count
  // Uses a local storage cache to reduce API calls
  (async function updateStarCount() {
    const REPO = "codybrom/blankie";
    const CACHE_KEY = "github_stars_count";
    const CACHE_DURATION = 6 * 60 * 60 * 1000; // 6 hours in milliseconds

    const countElement = document.getElementById("github-stars-count");
    const countElementMedium = document.getElementById("github-stars-count-medium");
    if (!countElement && !countElementMedium) return;

    // Check if we have a recent cached value
    const cachedData = localStorage.getItem(CACHE_KEY);
    if (cachedData) {
      try {
        const { stars, timestamp } = JSON.parse(cachedData);
        const age = Date.now() - timestamp;

        if (age < CACHE_DURATION) {
          // Use cached data if it's less than 6 hours old
          const formattedStars = new Intl.NumberFormat("en-US").format(stars);
          if (countElement) countElement.textContent = formattedStars;
          if (countElementMedium) countElementMedium.textContent = formattedStars;
          return;
        }
      } catch (e) {
        // If parsing fails, ignore and fetch fresh data
        console.error("Error parsing cached star count", e);
      }
    }

    // Fetch fresh data with a slight delay to not block page load
    setTimeout(async () => {
      try {
        const response = await fetch(`https://api.github.com/repos/${REPO}`, {
          headers: {
            Accept: "application/vnd.github.v3+json",
            "User-Agent": "BlankeRESTwebsite",
          },
        });

        if (!response.ok) {
          throw new Error(`GitHub API responded with ${response.status}`);
        }

        const data = await response.json();
        const stars = data.stargazers_count;

        // Update the displayed count
        if (stars) {
          const formattedStars = new Intl.NumberFormat("en-US").format(stars);
          if (countElement) countElement.textContent = formattedStars;
          if (countElementMedium) countElementMedium.textContent = formattedStars;
        }

        // Cache the result with a timestamp
        localStorage.setItem(
          CACHE_KEY,
          JSON.stringify({
            stars,
            timestamp: Date.now(),
          })
        );
      } catch (error) {
        console.error("Failed to update GitHub stars count", error);
        // Keep the build-time count on error
      }
    }, 1000); // 1-second delay
  })();
</script>
