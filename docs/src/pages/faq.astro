---
import Layout from "../layouts/Layout.astro";
import { marked } from "marked";

const title = "FAQ";

// Import the markdown file directly
const { getHeadings, rawContent } = await import("../../../FAQ.md");
const headings = getHeadings();

// Filter out the main h1 title, we only want the questions
const questions = headings.filter((h) => h.depth === 2);

// Function to rewrite relative GitHub links
function rewriteGitHubLinks(content: string): string {
  return content.replace(
    /(\[.*?\])\(((?!http|#).*?)\)/g,
    (match, linkText, linkPath) => {
      // Skip links that are already absolute or anchors
      if (linkPath.startsWith("http") || linkPath.startsWith("#")) {
        return match;
      }

      // Special case for CONTRIBUTING.md - link to website page
      if (linkPath.match(/CONTRIBUTING\.md$/i)) {
        return `${linkText}(/contributing)`;
      }

      // Remove leading ./ or ../ if present
      if (linkPath.startsWith("./") || linkPath.startsWith("../")) {
        linkPath = linkPath.replace(/^\.\.?\//, "");
      }

      // Return the formatted GitHub link
      return `${linkText}(https://github.com/codybrom/blankie/blob/main/${linkPath})`;
    }
  );
}

// Split content by headings and parse to HTML
const content = rawContent();
const sections = content.split(/(?=## )/);
const questionContent = Object.fromEntries(
  sections
    .slice(1) // Skip the first section (before first ##)
    .map((section) => {
      const title = section.match(/## (.*)\n/)?.[1] || "";
      let content = section.replace(/## .*\n/, "").trim();

      // Process content to handle GitHub links
      content = rewriteGitHubLinks(content);

      // Convert alerts/notes similar to the contributing page
      const htmlContent = marked(content) as string;
      const processedContent = htmlContent.replace(
        /<blockquote>[\s\n]*<p>\[!(IMPORTANT|NOTE|WARNING|CAUTION)\][\s\n]*(.*?)(<\/p>.*?)<\/blockquote>/gs,
        (
          _match: string,
          alertType: string,
          alertTitle: string,
          alertContent: string
        ) => `
          <div class="my-6 p-4 rounded-lg border-l-4 bg-yellow-500/10 border-yellow-500">
            <div class="font-semibold mb-2 text-lg">${alertType}</div>
            <p>${alertTitle.trim()}</p>
            ${alertContent.replace("</p>", "")}
          </div>
        `
      );

      return [title, processedContent];
    })
);

// Note: The content of this page is generated from a markdown file. Please do not edit this file directly.
---

<Layout title={title}>
  <main class="prose prose-lg prose-invert max-w-5xl mx-auto px-5 pt-28 pb-10">
    <section class="text-base bg-black">
      <h1 class="text-4xl font-semibold mb-6">Frequently Asked Questions</h1>

      <div class="not-prose">
        <div class="space-y-4">
          {
            questions.map((question) => (
              <details class="group bg-dark-gray rounded-lg faq-details">
                <summary class="flex cursor-pointer items-center gap-1.5 p-4 text-gray-900 text-left">
                  <div class="font-medium text-gray-100 grow text-lg">
                    {question.text}
                  </div>
                  <svg
                    class="h-5 w-5 shrink-0 transition duration-300 group-open:-rotate-180 stroke-gray-100"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    aria-hidden="true"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M19.5 8.25l-7.5 7.5-7.5-7.5"
                    />
                  </svg>
                </summary>
                <div class="p-4 pt-0 text-gray-200">
                  <Fragment set:html={questionContent[question.text]} />
                </div>
              </details>
            ))
          }
        </div>
      </div>
    </section>
  </main>
</Layout>
